//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ticket.TaskEngine.Application.MobileTicketService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MobileTicketService.MobileTicketSoap")]
    public interface MobileTicketSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string HelloWorld();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        System.Threading.Tasks.Task<string> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTicketNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetTicketNumber(string merchantCode, string terminalNo, string CodeStr, string TimeStamp, string signature, string str1, string str2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTicketNumber", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetTicketNumberAsync(string merchantCode, string terminalNo, string CodeStr, string TimeStamp, string signature, string str1, string str2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PrintUpload", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PrintUpload(string MerchantCode, string TerminalNo, string ProductDetails, string Signature, string TimeStamp, string str1, string str2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PrintUpload", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PrintUploadAsync(string MerchantCode, string TerminalNo, string ProductDetails, string Signature, string TimeStamp, string str1, string str2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLineProduct", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetLineProduct(string merchantCode, string TimeStamp, string signature, string ProJson, string str1, string str2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLineProduct", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetLineProductAsync(string merchantCode, string TimeStamp, string signature, string ProJson, string str1, string str2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TicketConsumeLine", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string TicketConsumeLine(string merchantCode, string terminalNo, string TicketJSON, string TimeStamp, string signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TicketConsumeLine", ReplyAction="*")]
        System.Threading.Tasks.Task<string> TicketConsumeLineAsync(string merchantCode, string terminalNo, string TicketJSON, string TimeStamp, string signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProductIssuedLine", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetProductIssuedLine(string merchantCode, string TimeStamp, string signature, string str1, string str2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProductIssuedLine", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetProductIssuedLineAsync(string merchantCode, string TimeStamp, string signature, string str1, string str2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateOnLineProductIssuedLine", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateOnLineProductIssuedLine(string MerchantCode, string onlinecode, string offlcode, string Signature, string TimeStamp, string str1, string str2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateOnLineProductIssuedLine", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateOnLineProductIssuedLineAsync(string MerchantCode, string onlinecode, string offlcode, string Signature, string TimeStamp, string str1, string str2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckThrough", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckThrough(string MerchantCode, string terminalNo, string Signature, string TimeStamp, string SellJson, string OrderType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckThrough", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CheckThroughAsync(string MerchantCode, string terminalNo, string Signature, string TimeStamp, string SellJson, string OrderType);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MobileTicketSoapChannel : Ticket.TaskEngine.Application.MobileTicketService.MobileTicketSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MobileTicketSoapClient : System.ServiceModel.ClientBase<Ticket.TaskEngine.Application.MobileTicketService.MobileTicketSoap>, Ticket.TaskEngine.Application.MobileTicketService.MobileTicketSoap {
        
        public MobileTicketSoapClient() {
        }
        
        public MobileTicketSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MobileTicketSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MobileTicketSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MobileTicketSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string HelloWorld() {
            return base.Channel.HelloWorld();
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync() {
            return base.Channel.HelloWorldAsync();
        }
        
        public string GetTicketNumber(string merchantCode, string terminalNo, string CodeStr, string TimeStamp, string signature, string str1, string str2) {
            return base.Channel.GetTicketNumber(merchantCode, terminalNo, CodeStr, TimeStamp, signature, str1, str2);
        }
        
        public System.Threading.Tasks.Task<string> GetTicketNumberAsync(string merchantCode, string terminalNo, string CodeStr, string TimeStamp, string signature, string str1, string str2) {
            return base.Channel.GetTicketNumberAsync(merchantCode, terminalNo, CodeStr, TimeStamp, signature, str1, str2);
        }
        
        public string PrintUpload(string MerchantCode, string TerminalNo, string ProductDetails, string Signature, string TimeStamp, string str1, string str2) {
            return base.Channel.PrintUpload(MerchantCode, TerminalNo, ProductDetails, Signature, TimeStamp, str1, str2);
        }
        
        public System.Threading.Tasks.Task<string> PrintUploadAsync(string MerchantCode, string TerminalNo, string ProductDetails, string Signature, string TimeStamp, string str1, string str2) {
            return base.Channel.PrintUploadAsync(MerchantCode, TerminalNo, ProductDetails, Signature, TimeStamp, str1, str2);
        }
        
        public string GetLineProduct(string merchantCode, string TimeStamp, string signature, string ProJson, string str1, string str2) {
            return base.Channel.GetLineProduct(merchantCode, TimeStamp, signature, ProJson, str1, str2);
        }
        
        public System.Threading.Tasks.Task<string> GetLineProductAsync(string merchantCode, string TimeStamp, string signature, string ProJson, string str1, string str2) {
            return base.Channel.GetLineProductAsync(merchantCode, TimeStamp, signature, ProJson, str1, str2);
        }
        
        public string TicketConsumeLine(string merchantCode, string terminalNo, string TicketJSON, string TimeStamp, string signature) {
            return base.Channel.TicketConsumeLine(merchantCode, terminalNo, TicketJSON, TimeStamp, signature);
        }
        
        public System.Threading.Tasks.Task<string> TicketConsumeLineAsync(string merchantCode, string terminalNo, string TicketJSON, string TimeStamp, string signature) {
            return base.Channel.TicketConsumeLineAsync(merchantCode, terminalNo, TicketJSON, TimeStamp, signature);
        }
        
        public string GetProductIssuedLine(string merchantCode, string TimeStamp, string signature, string str1, string str2) {
            return base.Channel.GetProductIssuedLine(merchantCode, TimeStamp, signature, str1, str2);
        }
        
        public System.Threading.Tasks.Task<string> GetProductIssuedLineAsync(string merchantCode, string TimeStamp, string signature, string str1, string str2) {
            return base.Channel.GetProductIssuedLineAsync(merchantCode, TimeStamp, signature, str1, str2);
        }
        
        public string UpdateOnLineProductIssuedLine(string MerchantCode, string onlinecode, string offlcode, string Signature, string TimeStamp, string str1, string str2) {
            return base.Channel.UpdateOnLineProductIssuedLine(MerchantCode, onlinecode, offlcode, Signature, TimeStamp, str1, str2);
        }
        
        public System.Threading.Tasks.Task<string> UpdateOnLineProductIssuedLineAsync(string MerchantCode, string onlinecode, string offlcode, string Signature, string TimeStamp, string str1, string str2) {
            return base.Channel.UpdateOnLineProductIssuedLineAsync(MerchantCode, onlinecode, offlcode, Signature, TimeStamp, str1, str2);
        }
        
        public string CheckThrough(string MerchantCode, string terminalNo, string Signature, string TimeStamp, string SellJson, string OrderType) {
            return base.Channel.CheckThrough(MerchantCode, terminalNo, Signature, TimeStamp, SellJson, OrderType);
        }
        
        public System.Threading.Tasks.Task<string> CheckThroughAsync(string MerchantCode, string terminalNo, string Signature, string TimeStamp, string SellJson, string OrderType) {
            return base.Channel.CheckThroughAsync(MerchantCode, terminalNo, Signature, TimeStamp, SellJson, OrderType);
        }
    }
}
