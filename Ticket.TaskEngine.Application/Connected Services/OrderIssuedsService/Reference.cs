//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ticket.TaskEngine.Application.OrderIssuedsService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OrderIssuedsService.XJ_OrderIssuedsSoap")]
    public interface XJ_OrderIssuedsSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string HelloWorld();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        System.Threading.Tasks.Task<string> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOrderIssuedLine", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetOrderIssuedLine(string merchantCode, string TimeStamp, string signature, string str1, string str2, int OrderType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOrderIssuedLine", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetOrderIssuedLineAsync(string merchantCode, string TimeStamp, string signature, string str1, string str2, int OrderType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateIssuedLine", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateIssuedLine(string MerchantCode, string OrderNo, string ECode, string Signature, string TimeStamp, string str1, string str2, int OrderType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateIssuedLine", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateIssuedLineAsync(string MerchantCode, string OrderNo, string ECode, string Signature, string TimeStamp, string str1, string str2, int OrderType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LineSellUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LineSellUpdate(string MerchantCode, string SellJSON, string Signature, string TimeStamp, string str1, string str2, int OrderType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LineSellUpdate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LineSellUpdateAsync(string MerchantCode, string SellJSON, string Signature, string TimeStamp, string str1, string str2, int OrderType);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface XJ_OrderIssuedsSoapChannel : Ticket.TaskEngine.Application.OrderIssuedsService.XJ_OrderIssuedsSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class XJ_OrderIssuedsSoapClient : System.ServiceModel.ClientBase<Ticket.TaskEngine.Application.OrderIssuedsService.XJ_OrderIssuedsSoap>, Ticket.TaskEngine.Application.OrderIssuedsService.XJ_OrderIssuedsSoap {
        
        public XJ_OrderIssuedsSoapClient() {
        }
        
        public XJ_OrderIssuedsSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public XJ_OrderIssuedsSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public XJ_OrderIssuedsSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public XJ_OrderIssuedsSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string HelloWorld() {
            return base.Channel.HelloWorld();
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync() {
            return base.Channel.HelloWorldAsync();
        }
        
        public string GetOrderIssuedLine(string merchantCode, string TimeStamp, string signature, string str1, string str2, int OrderType) {
            return base.Channel.GetOrderIssuedLine(merchantCode, TimeStamp, signature, str1, str2, OrderType);
        }
        
        public System.Threading.Tasks.Task<string> GetOrderIssuedLineAsync(string merchantCode, string TimeStamp, string signature, string str1, string str2, int OrderType) {
            return base.Channel.GetOrderIssuedLineAsync(merchantCode, TimeStamp, signature, str1, str2, OrderType);
        }
        
        public string UpdateIssuedLine(string MerchantCode, string OrderNo, string ECode, string Signature, string TimeStamp, string str1, string str2, int OrderType) {
            return base.Channel.UpdateIssuedLine(MerchantCode, OrderNo, ECode, Signature, TimeStamp, str1, str2, OrderType);
        }
        
        public System.Threading.Tasks.Task<string> UpdateIssuedLineAsync(string MerchantCode, string OrderNo, string ECode, string Signature, string TimeStamp, string str1, string str2, int OrderType) {
            return base.Channel.UpdateIssuedLineAsync(MerchantCode, OrderNo, ECode, Signature, TimeStamp, str1, str2, OrderType);
        }
        
        public string LineSellUpdate(string MerchantCode, string SellJSON, string Signature, string TimeStamp, string str1, string str2, int OrderType) {
            return base.Channel.LineSellUpdate(MerchantCode, SellJSON, Signature, TimeStamp, str1, str2, OrderType);
        }
        
        public System.Threading.Tasks.Task<string> LineSellUpdateAsync(string MerchantCode, string SellJSON, string Signature, string TimeStamp, string str1, string str2, int OrderType) {
            return base.Channel.LineSellUpdateAsync(MerchantCode, SellJSON, Signature, TimeStamp, str1, str2, OrderType);
        }
    }
}
